# Description:	The Rust language with Cargo included.
# URL:		http://www.rust-lang.org/
# Maintainer:	sajcho, saux dot aarch64 at gmail dot com
# Depends on:	llvm-toolchain
#
# Important!!! - Use rust-bootstrap for the first build.
# After successful build remove rust-bootstrap
# and install rust. Enjoy it.

name=rust
_realname=rustc
version=1.78.0
release=1

source=(https://static.rust-lang.org/dist/${_realname}-${version}-src.tar.xz \
	0001-dist.rs-change-dir-libexec-to-lib.patch \
	0002-tool.rs-change-dir-libexec-to-lib.patch \
	0003-gcc-eh-libunwind.patch \
	0004-do-not-install-libunwind-source.patch \
	0005-musl-fix-linux_musl_base.patch \
	0006-no-export-ld-library-path.patch \
	0007-move-py-scripts-to-share.patch \
	0008-install-template-shebang.patch \
	0009-need-rpath.patch \
	0010-need-ssp_nonshared.patch \
	0011-revert-rustc_codegen_ssa-use-try_canonicalize-in-rpath.patch)

build() {
	cd ${_realname}-${version}-src

	export CC="gcc"
	export CXX="g++"

	# use /usr/lib instead of /usr/libexec
	patch -p1 -i $SRC/0001-dist.rs-change-dir-libexec-to-lib.patch
	patch -p1 -i $SRC/0002-tool.rs-change-dir-libexec-to-lib.patch

	# from alpine linux
	patch -p1 -i $SRC/0003-gcc-eh-libunwind.patch
	patch -p1 -i $SRC/0004-do-not-install-libunwind-source.patch
	patch -p1 -i $SRC/0005-musl-fix-linux_musl_base.patch
	patch -p1 -i $SRC/0006-no-export-ld-library-path.patch
	patch -p1 -i $SRC/0007-move-py-scripts-to-share.patch
	patch -p1 -i $SRC/0008-install-template-shebang.patch
	patch -p1 -i $SRC/0009-need-rpath.patch
	patch -p1 -i $SRC/0010-need-ssp_nonshared.patch
	patch -p1 -i $SRC/0011-revert-rustc_codegen_ssa-use-try_canonicalize-in-rpath.patch


cat <<- EOF > $SRC/config.toml
	change-id = 121754
	profile = "user"

	[llvm]
	ninja = true
	link-shared = true

	[install]
	prefix = "/usr"

	[rust]
	channel = "stable"
	codegen-units-std = 1
	debuginfo-level-std = 2
	rpath = false
	codegen-tests = false
	musl-root="/usr"
	description = "SAUX-x86_64 musl"

	[build]
	target = ["$CHOST"]
	verbose = 0
	extended = true
	locked-deps = true
	sanitizers = false
	vendor = true
	docs = false
	optimized-compiler-builtins = false
	profiler = false
	python = "/usr/bin/python3"
	cargo = "/usr/bin/cargo"
	rustc = "/usr/bin/rustc"
	tools = ["analysis",
		"cargo",
		"clippy",
		"rustfmt",
		"rust-analyzer",
		"rust-analyzer-proc-macro-srv",
		"rustdoc",
		"src"]

	[target.$CHOST]
	musl-root="/usr"
	crt-static = false
	llvm-config = "/usr/bin/llvm-config"
	llvm-filecheck = "/usr/bin/FileCheck"
EOF

	cat $SRC/config.toml

	mkdir "$PKGMK_SOURCE_DIR/rust" || true
	export CARGO_HOME="$PKGMK_SOURCE_DIR/rust"
	export RUST_BACKTRACE="1"

	# saux uses -flto=auto -ffat-lto-objects - turn it off
	export CFLAGS="${CFLAGS/ -flto=auto -ffat-lto-objects/}"
	export CXXFLAGS="${CXXFLAGS/ -flto=auto -ffat-lto-objects/}"

	/usr/bin/python3 ./x.py build --config="${SRC}"/config.toml ${JOBS:+-j ${JOBS}}

	DESTDIR=$PKG /usr/bin/python3 ./x.py --config="${SRC}"/config.toml install

	# Cleanup
	rm -r $PKG/etc
	rm -r $PKG/usr/share/doc
	rm -r $PKG/usr/share/zsh
	rm $PKG/usr/lib/rustlib/{components,install.log,manifest-*,rust-installer-version,uninstall.sh}

	ln -srft $PKG/usr/lib $PKG/usr/lib/rustlib/$CHOST/lib/*.so
}
